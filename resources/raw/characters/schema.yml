# yaml-language-server: $schema=http://json-schema.org/draft-07/schema#
type: object
required: [stats, skills]
properties:
  name:
    type: string

  tags:
    type: array
    items:
      type: string

  knowledges:
    type: array
    items:
      type: string

  stats:
    $ref: "#/definitions/stats"

  skills:
    $ref: "#/definitions/skills"

  identities:
    type: array
    items:
      $ref: "#/definitions/identity"

  effects:
    type: array
    items:
      $ref: "#/definitions/effect"

  actions:
    type: object
    additionalProperties:
      type: object
      $ref: "#/definitions/specific_action"

  weapons:
    type: object
    additionalProperties:
      type: object
      $ref: "#/definitions/weapon"

  drones:
    type: object
    additionalProperties:
      type: object
      $ref: "#/definitions/drone"

  outfits:
    type: object
    additionalProperties:
      type: object
      $ref: "#/definitions/outfit"

  tech:
    type: object
    additionalProperties:
      anyOf:
        - $ref: "#/definitions/base_item"
        - required: [name, stats]
          type: object
          properties:
            name:
              type: string
              enum: [Persona incarné]
            stats:
              type: object
              required: [firewall, corruption, traitement, attaque]
              properties:
                firewall:
                  type: integer
                corruption:
                  type: integer
                traitement:
                  type: integer
                attaque:
                  type: integer

  sprites:
    type: object
    additionalProperties:
      type: object
      $ref: "#/definitions/companion"

#~~~~~~~~~~~ DEFINITIONS ~~~~~~~~~~~#
definitions:
  #~~~ STATS ~~~#
  refer_stat:
    type: object
    required: [score, stat]
    properties:
      score:
        type: integer
      stat:
        type: array
        items:
          type: string
          enum: [con, agi, rea, for, vol, log, int, cha]
  #~~~ STATS ~~~#
  stats:
    type: "object"
    required:
      [
        con,
        agi,
        rea,
        for,
        vol,
        log,
        int,
        cha,
        resist_phy,
        resist_ment,
        def_phy,
        def_ment,
        ess,
        edge,
        max_edge,
        init,
        action_maj,
        action_min,
        hit_phy,
        hit_stun,
        hit_over,
        natural_heal,
      ]
    properties:
      con:
        type: integer
      agi:
        type: integer
      rea:
        type: integer
      for:
        type: integer
      vol:
        type: integer
      log:
        type: integer
      int:
        type: integer
      cha:
        type: integer
      con_mod:
        type: integer
      agi_mod:
        type: integer
      rea_mod:
        type: integer
      for_mod:
        type: integer
      vol_mod:
        type: integer
      log_mod:
        type: integer
      int_mod:
        type: integer
      cha_mod:
        type: integer
      resist_phy:
        $ref: "#/definitions/refer_stat"
      resist_ment:
        $ref: "#/definitions/refer_stat"
      def_phy:
        $ref: "#/definitions/refer_stat"
      def_ment:
        $ref: "#/definitions/refer_stat"
      algo:
        $ref: "#/definitions/refer_stat"
      trad:
        $ref: "#/definitions/refer_stat"
      ess:
        type: integer
      mag:
        type: integer
      initiation:
        type: integer
      res:
        type: integer
      submersion:
        type: integer
      edge:
        type: integer
      max_edge:
        type: integer
      init:
        $ref: "#/definitions/refer_stat"
      action_maj:
        type: integer
      action_min:
        type: integer
      hit_phy:
        type: integer
      hit_stun:
        type: integer
      hit_over:
        type: integer
      natural_heal:
        $ref: "#/definitions/refer_stat"

  #~~~ SKILLS ~~~#
  skill:
    type: object
    required: [base]
    properties:
      base:
        type: integer
      specialisations:
        type: array
        items:
          type: string
      expertises:
        type: array
        items:
          type: string

  #~~~ SKILLS ~~~#
  skills:
    type: "object"
    properties:
      perception:
        $ref: "#/definitions/skill"
      furtivité:
        $ref: "#/definitions/skill"
      athlétisme:
        $ref: "#/definitions/skill"
      electronique:
        $ref: "#/definitions/skill"
      combat.rapp:
        $ref: "#/definitions/skill"
      ingénierie:
        $ref: "#/definitions/skill"
      pilotage:
        $ref: "#/definitions/skill"
      technomancie:
        $ref: "#/definitions/skill"

  #~~~ IDENTITIES ~~~#
  identity:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      quality:
        type: string
      price:
        type: integer
      nuyens:
        type: integer
      lifestyle:
        $ref: "#/definitions/lifestyle"
      licences:
        type: array
        items:
          $ref: "#/definitions/licences"
      contacts:
        type: array
        items:
          $ref: "#/definitions/contact"

  #~~~ CONTACT ~~~#
  contact:
    type: object
    required: [name, loyalty, connection]
    properties:
      name:
        type: string
      loyalty:
        type: integer
      connection:
        type: integer
      description:
        type: string

  #~~~ LIFESTYLE ~~~#
  lifestyle:
    type: object
    required: [name, price]
    properties:
      name:
        type: string
      price:
        type: integer

  #~~~ LICENCES ~~~#
  licences:
    type: object
    required: [name, quality, price]
    properties:
      name:
        type: string
      quality:
        type: string
      price:
        type: integer

  #~~~ EFFECT ~~~#
  effect:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      description:
        type: string

  #~~~ LOAD_ACTION ~~~#
  base_action:
    type: object
    required: [major, minor]
    properties:
      maintained:
        type: boolean
      major:
        type: integer
      minor:
        type: integer
      description:
        type: string

  specific_action:
    type: object
    allOf:
      - $ref: "#/definitions/base_action"
      - required: [type]
        properties:
          type:
            type: string
            enum: ["technomancy"]

  contact_action:
    type: object
    required: [major, minor, damage, damage_type, ranges]
    properties:
      major:
        type: integer
      minor:
        type: integer
      description:
        type: string
      damage:
        type: integer
      damage_type:
        type: string
      ranges:
        type: object
        required: [contact]
        properties:
          contact:
            type: integer

  load_action:
    type: object
    required: [major, minor, ammo]
    properties:
      major:
        type: integer
      minor:
        type: integer
      ammo:
        type: integer
      description:
        type: string

  shot_action:
    type: object
    required: [major, minor, damage, damage_type, ammo_consumption, ranges]
    properties:
      description:
        type: string
      major:
        type: integer
      minor:
        type: integer
      damage:
        type: integer
      damage_type:
        type: string
      ammo_consumption:
        type: integer
      ranges:
        $ref: "#/definitions/range_scores"

  #~~~ RANGES ~~~#
  range_enum:
    type: string
    enum: [contact, near, short, medium, far]

  range_scores:
    type: object
    required: [contact, near, short, medium, far]
    propertyNames:
      $ref: "#/definitions/range_enum"
    patternProperties:
      ".*":
        type: integer

  range_labels:
    type: object
    patternProperties:
      "r[0-9]*":
        $ref: "#/definitions/range_enum"

  #~~~ BASE_ITEM ~~~#
  base_item:
    type: object
    required: ["name", "price", "legal", "licenced", "concealment"]
    properties:
      type:
        type: string
      name:
        type: string
      manufacturer:
        type: string
      description:
        type: string
      price:
        type: integer
      quantity:
        type: integer
      legal:
        type: boolean
      licenced:
        type: boolean
      concealment:
        type: integer
      slots:
        type: array
        items:
          $ref: "#/definitions/slot"

  #~~~ SLOT ~~~#
  slot:
    type: object
    required: [name, size]
    properties:
      name:
        type: string
      size:
        type: string
        enum: [S, M, L, XL]
      concealment:
        type: integer

  #~~~ WEAPON ~~~#
  weapon:
    type: object
    allOf:
      - $ref: "#/definitions/base_item"
      - properties:
          ranges:
            $ref: "#/definitions/range_scores"
          range_labels:
            $ref: "#/definitions/range_labels"
          ammo:
            type: integer
          damage:
            type: integer
          damage_type:
            type: string
          actions:
            type: object
            allOf:
              - properties:
                  attaquer:
                    $ref: "#/definitions/contact_action"
                  tir:
                    $ref: "#/definitions/shot_action"
                  tir_semi_auto:
                    $ref: "#/definitions/shot_action"
                  tir_rafale:
                    $ref: "#/definitions/shot_action"
                  recharger:
                    $ref: "#/definitions/load_action"
              - additionalProperties:
                  type: object
                  $ref: "#/definitions/base_action"

  #~~~ DRONE ~~~#
  drone:
    type: object
    allOf:
      - $ref: "#/definitions/base_item"
      - required: [hit, stats]
        properties:
          hit:
            type: integer
          stats:
            type: object
            required:
              [
                maniability_flat,
                maniability_rough,
                acceleration,
                step,
                max_speed,
                autopilot,
                resistance,
                sensors,
                armor,
              ]
            properties:
              maniability_flat:
                type: integer
              maniability_rough:
                type: integer
              acceleration:
                type: integer
              step:
                type: integer
              max_speed:
                type: integer
              autopilot:
                type: integer
              resistance:
                type: integer
              sensors:
                type: integer
              armor:
                type: integer

  #~~~ OUTFIT ~~~#
  outfit:
    type: object
    allOf:
      - $ref: "#/definitions/base_item"

  #~~~ COMPANION ~~~#
  companion:
    type: object
    properties:
      stats:
        firewall_mod: integer
        corruption_mod: integer
        traitement: integer
        attaque: integer
      skills:
        type: array
        items:
          enum: [Ingenierie, Electronique]
      actions:
        type: array
        items:
          $ref: "#/definitions/base_action"
      effects:
        $ref: "#/definitions/effect"
